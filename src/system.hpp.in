#pragma once
#include <vector>

#include "lib.hpp"

#cmakedefine INPUTS_DIR "@INPUTS_DIR@"

#define DEFINE_EXAPMLE(EXAMPLE_NAME)           \
    class EXAMPLE_NAME : public ExampleInput { \
       public:                                 \
        using ExampleInput::ExampleInput;      \
        int assign() override;                 \
    };

namespace trisys {
class TRIDIAG_SYSTEM {
   public:
    int n;
    real *a;
    real *diag;
    real *c;
    real *rhs;

    TRIDIAG_SYSTEM(int n);
    ~TRIDIAG_SYSTEM();
    bool null_check();
    TRIDIAG_SYSTEM(const TRIDIAG_SYSTEM &sys) { n = sys.n; };
};

/**
 * @brief      The base class for sample input
 */
class ExampleInput {
   public:
    TRIDIAG_SYSTEM sys;

    ExampleInput(int n) : sys(n) { assign(); };
    ~ExampleInput(){};
    virtual int assign() { return 0; };
    ExampleInput(const ExampleInput &ei) : sys(ei.sys.n){};
};

class ExampleFromInput {
   public:
    TRIDIAG_SYSTEM sys;
    std::string path;

    ExampleFromInput(int n) : sys(n) {};
    ~ExampleFromInput(){};
    int assign();
    ExampleFromInput(const ExampleInput &ei) : sys(ei.sys.n){};
};

/**
 * @brief      Fixed Input Sample
 */
DEFINE_EXAPMLE(ExampleFixedInput)

/**
 * @brief      (1) Each matrix entry randomly generated from a uniform
 * distribution on [−1,1] (denoted as U(−1,1))
 */
DEFINE_EXAPMLE(ExampleRandom)

/**
 * @brief      Random RHS(U(-1, 1)) Input
 */
DEFINE_EXAPMLE(ExampleRandomRHSInput)
}  // namespace trisys

#undef DEFINE_EXAPMLE